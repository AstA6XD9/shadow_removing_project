#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
D√©monstration de la pr√©servation des caract√©ristiques du tissu
Montre comment les nouvelles m√©thodes pr√©servent couleur, brillance et motifs
"""

import cv2
import numpy as np
import os
import matplotlib.pyplot as plt
from shadow_removing import AdvancedShadowRemover

def analyze_fabric_characteristics(image):
    """Analyse les caract√©ristiques du tissu dans l'image"""
    print("üîç Analyse des Caract√©ristiques du Tissu")
    print("-" * 40)
    
    # Convertir en LAB pour analyse
    lab = cv2.cvtColor(image, cv2.COLOR_BGR2LAB)
    l, a, b = cv2.split(lab)
    
    # Analyser la brillance
    brightness_mean = np.mean(l)
    brightness_std = np.std(l)
    print(f"üí° Brillance moyenne: {brightness_mean:.1f}")
    print(f"üí° Variation de brillance: {brightness_std:.1f}")
    
    # Analyser la saturation des couleurs
    hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)
    saturation = hsv[:, :, 1]
    print(f"üé® Saturation moyenne: {np.mean(saturation):.1f}")
    
    # Analyser la texture
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    texture_complexity = np.std(cv2.Laplacian(gray, cv2.CV_64F))
    print(f"üßµ Complexit√© de texture: {texture_complexity:.1f}")
    
    # D√©terminer le type de tissu
    if texture_complexity < 20:
        fabric_type = "Tissu lisse (velours, soie)"
    elif texture_complexity < 40:
        fabric_type = "Tissu mat (coton, lin)"
    else:
        fabric_type = "Tissu avec motifs"
    
    print(f"üè∑Ô∏è Type de tissu d√©tect√©: {fabric_type}")
    
    return {
        'brightness_mean': brightness_mean,
        'brightness_std': brightness_std,
        'saturation_mean': np.mean(saturation),
        'texture_complexity': texture_complexity,
        'fabric_type': fabric_type
    }

def compare_fabric_preservation(original, processed, method_name):
    """Compare la pr√©servation des caract√©ristiques du tissu"""
    print(f"\nüìä Comparaison - {method_name}")
    print("-" * 30)
    
    # Analyser l'original
    orig_chars = analyze_fabric_characteristics(original)
    
    # Analyser le r√©sultat
    proc_chars = analyze_fabric_characteristics(processed)
    
    # Calculer les diff√©rences
    brightness_diff = abs(orig_chars['brightness_mean'] - proc_chars['brightness_mean'])
    saturation_diff = abs(orig_chars['saturation_mean'] - proc_chars['saturation_mean'])
    texture_diff = abs(orig_chars['texture_complexity'] - proc_chars['texture_complexity'])
    
    print(f"üìà Diff√©rence de brillance: {brightness_diff:.1f}")
    print(f"üìà Diff√©rence de saturation: {saturation_diff:.1f}")
    print(f"üìà Diff√©rence de texture: {texture_diff:.1f}")
    
    # Score de pr√©servation (plus bas = mieux pr√©serv√©)
    preservation_score = (brightness_diff + saturation_diff + texture_diff) / 3
    print(f"üèÜ Score de pr√©servation: {preservation_score:.1f} (plus bas = mieux)")
    
    return preservation_score

def demo_fabric_preservation():
    """D√©monstration de la pr√©servation des caract√©ristiques du tissu"""
    print("üé≠ D√©monstration de la Pr√©servation des Caract√©ristiques du Tissu")
    print("=" * 70)
    print("Objectif: Montrer comment les nouvelles m√©thodes pr√©servent:")
    print("‚Ä¢ La couleur originale du tissu")
    print("‚Ä¢ La brillance et les reflets")
    print("‚Ä¢ Les motifs et textures")
    print("=" * 70)
    
    # Chemin de l'image
    image_path = "C:/Users/eloua/OneDrive/Images/IMG_6043.jpg"
    
    if not os.path.exists(image_path):
        print(f"‚ùå Image non trouv√©e: {image_path}")
        return
    
    # Charger l'image
    image = cv2.imread(image_path)
    if image is None:
        print(f"‚ùå Impossible de charger l'image: {image_path}")
        return
    
    print(f"‚úÖ Image charg√©e: {image.shape}")
    
    # Initialiser le shadow remover
    shadow_remover = AdvancedShadowRemover()
    
    # Analyser l'image originale
    print("\nüîç Analyse de l'image originale:")
    original_chars = analyze_fabric_characteristics(image)
    
    # Test des diff√©rentes m√©thodes
    methods = {
        'M√©thode Classique (Retinex)': 'retinex',
        'M√©thode Texture-Aware': 'texture_aware',
        'M√©thode Intelligente': 'intelligent',
        'M√©thode Fabric-Preserving': 'fabric_preserving'
    }
    
    results = {}
    preservation_scores = {}
    
    for method_name, method_key in methods.items():
        print(f"\n{'='*50}")
        print(f"üß™ Test: {method_name}")
        print(f"{'='*50}")
        
        try:
            # Appliquer la m√©thode
            result = shadow_remover.remove_shadows(image, method=method_key)
            
            if result is not None:
                # Sauvegarder le r√©sultat
                filename = f"demo_{method_key}.jpg"
                cv2.imwrite(filename, result)
                print(f"‚úÖ {method_name} r√©ussie")
                print(f"üíæ Sauvegard√©: {filename}")
                
                # Comparer la pr√©servation
                score = compare_fabric_preservation(image, result, method_name)
                preservation_scores[method_name] = score
                results[method_name] = result
                
                # √âvaluer la qualit√© g√©n√©rale
                metrics = shadow_remover.assess_quality(image, result)
                print(f"üìä Qualit√© globale: {metrics['overall_quality']:.3f}")
                
            else:
                print(f"‚ùå {method_name} √©chou√©e")
                
        except Exception as e:
            print(f"‚ùå Erreur avec {method_name}: {e}")
    
    # Afficher le classement
    print(f"\nüèÜ CLASSEMENT PAR PR√âSERVATION DES CARACT√âRISTIQUES")
    print("=" * 60)
    print("(Score plus bas = meilleure pr√©servation)")
    print("-" * 60)
    
    sorted_scores = sorted(preservation_scores.items(), key=lambda x: x[1])
    for i, (method, score) in enumerate(sorted_scores, 1):
        print(f"{i}. {method}: {score:.1f}")
    
    # Cr√©er une visualisation comparative
    create_comparison_visualization(image, results)
    
    print(f"\n‚ú® D√âMONSTRATION TERMIN√âE")
    print("=" * 50)
    print("Les nouvelles m√©thodes 'intelligent' et 'fabric_preserving'")
    print("devraient mieux pr√©server les caract√©ristiques du tissu!")

def create_comparison_visualization(original, results):
    """Cr√©e une visualisation comparative des r√©sultats"""
    print(f"\nüé® Cr√©ation de la visualisation comparative...")
    
    try:
        n_methods = len(results)
        if n_methods == 0:
            print("‚ùå Aucun r√©sultat √† visualiser")
            return
        
        # Cr√©er la figure
        fig, axes = plt.subplots(2, (n_methods + 1) // 2 + 1, figsize=(20, 10))
        axes = axes.flatten()
        
        # Image originale
        img_rgb = cv2.cvtColor(original, cv2.COLOR_BGR2RGB)
        axes[0].imshow(img_rgb)
        axes[0].set_title("Image Originale", fontsize=12, fontweight='bold')
        axes[0].axis('off')
        
        # R√©sultats
        for i, (method_name, result) in enumerate(results.items(), 1):
            if i < len(axes):
                result_rgb = cv2.cvtColor(result, cv2.COLOR_BGR2RGB)
                axes[i].imshow(result_rgb)
                axes[i].set_title(method_name, fontsize=10)
                axes[i].axis('off')
        
        # Masquer les axes inutilis√©s
        for i in range(len(results) + 1, len(axes)):
            axes[i].axis('off')
        
        plt.tight_layout()
        plt.savefig("comparaison_preservation_tissu.png", dpi=150, bbox_inches='tight')
        plt.show()
        
        print("‚úÖ Visualisation sauvegard√©e: comparaison_preservation_tissu.png")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation de la visualisation: {e}")

def test_shadow_vs_pattern_detection():
    """Test sp√©cifique de la diff√©renciation ombres vs motifs"""
    print(f"\nüîç Test de Diff√©renciation Ombres vs Motifs")
    print("-" * 50)
    
    image_path = "C:/Users/eloua/OneDrive/Images/IMG_6043.jpg"
    
    if not os.path.exists(image_path):
        print(f"‚ùå Image non trouv√©e: {image_path}")
        return
    
    image = cv2.imread(image_path)
    shadow_remover = AdvancedShadowRemover()
    
    try:
        # Obtenir la d√©tection d'ombres
        shadow_mask, shadow_probability = shadow_remover._advanced_shadow_pattern_detection(image)
        
        # Analyser les zones d√©tect√©es
        shadow_pixels = np.sum(shadow_mask)
        total_pixels = shadow_mask.size
        shadow_percentage = shadow_pixels / total_pixels * 100
        
        print(f"üìä Statistiques de d√©tection:")
        print(f"  Pixels d√©tect√©s comme ombres: {shadow_pixels:,}")
        print(f"  Total de pixels: {total_pixels:,}")
        print(f"  Pourcentage d'ombres: {shadow_percentage:.1f}%")
        
        # Analyser la distribution des probabilit√©s
        prob_mean = np.mean(shadow_probability)
        prob_std = np.std(shadow_probability)
        print(f"  Probabilit√© moyenne: {prob_mean:.3f}")
        print(f"  √âcart-type: {prob_std:.3f}")
        
        # Cr√©er une visualisation d√©taill√©e
        fig, axes = plt.subplots(2, 3, figsize=(18, 12))
        
        # Image originale
        img_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
        axes[0, 0].imshow(img_rgb)
        axes[0, 0].set_title("Image Originale")
        axes[0, 0].axis('off')
        
        # Carte de probabilit√©
        im1 = axes[0, 1].imshow(shadow_probability, cmap='hot')
        axes[0, 1].set_title("Probabilit√© d'Ombres")
        axes[0, 1].axis('off')
        plt.colorbar(im1, ax=axes[0, 1])
        
        # Masque binaire
        axes[0, 2].imshow(shadow_mask, cmap='gray')
        axes[0, 2].set_title("Masque d'Ombres")
        axes[0, 2].axis('off')
        
        # Histogramme des probabilit√©s
        axes[1, 0].hist(shadow_probability.flatten(), bins=50, alpha=0.7)
        axes[1, 0].set_title("Distribution des Probabilit√©s")
        axes[1, 0].set_xlabel("Probabilit√©")
        axes[1, 0].set_ylabel("Fr√©quence")
        
        # Image avec ombres en rouge
        overlay = img_rgb.copy()
        overlay[shadow_mask] = [255, 0, 0]
        axes[1, 1].imshow(overlay)
        axes[1, 1].set_title("Ombres D√©tect√©es (Rouge)")
        axes[1, 1].axis('off')
        
        # Image avec motifs pr√©serv√©s
        non_shadow_mask = ~shadow_mask
        preserved = img_rgb.copy()
        preserved[non_shadow_mask] = preserved[non_shadow_mask] * 0.7  # Assombrir l√©g√®rement
        axes[1, 2].imshow(preserved)
        axes[1, 2].set_title("Motifs Pr√©serv√©s")
        axes[1, 2].axis('off')
        
        plt.tight_layout()
        plt.savefig("analyse_ombres_vs_motifs.png", dpi=150, bbox_inches='tight')
        plt.show()
        
        print("‚úÖ Analyse sauvegard√©e: analyse_ombres_vs_motifs.png")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de l'analyse: {e}")

def main():
    """Fonction principale"""
    print("üé≠ D√©monstration de la Pr√©servation des Caract√©ristiques du Tissu")
    print("=" * 70)
    
    # D√©monstration principale
    demo_fabric_preservation()
    
    # Test de diff√©renciation ombres vs motifs
    test_shadow_vs_pattern_detection()
    
    print(f"\nüéØ R√âSUM√â DE LA D√âMONSTRATION")
    print("=" * 50)
    print("‚úÖ Analyse des caract√©ristiques du tissu")
    print("‚úÖ Comparaison des m√©thodes de pr√©servation")
    print("‚úÖ Test de diff√©renciation ombres vs motifs")
    print("‚úÖ Visualisations d√©taill√©es")
    print("\nüí° Les nouvelles m√©thodes devraient montrer:")
    print("   ‚Ä¢ Meilleure pr√©servation de la couleur")
    print("   ‚Ä¢ Conservation de la brillance")
    print("   ‚Ä¢ Maintien des motifs du tissu")
    print("   ‚Ä¢ Suppression efficace des vraies ombres")

if __name__ == "__main__":
    main()
